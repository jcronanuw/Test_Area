`uv.plots` <-
function(x,var=NULL,col.fill='blue',col.point='black',
col.line='red',...){
oldpar<-par(no.readonly=TRUE)
if(!is.null(var)){
y<-subset(x,select=eval(parse(text=var))) #select variables to summarize
y<-as.data.frame(y)
}
else{y<-as.data.frame(x)} #graphics settings
#layout plot
layout(matrix(c(1,1,2,3,4,5),
nrow=3,ncol=2,byrow=TRUE),
heights=c(.1,.45,.45),widths=c(.5,.5))
par(mar=c(1,1,1,1))
#loop thru variables
for(i in 1:ncol(y)){
#plot title
plot.new()
text(.5,.5,labels=names(y[i]),
font=2,cex=3,xpd=TRUE)
#histogram (upper left panel)
par(mar=c(5,5,4,2))
hist(y[[i]],prob=TRUE,col=col.fill,
xaxs='i',yaxs='i',xlab=names(y[i]),
main='Histogram',...)
lines(density(y[[i]]))
#box-and-whisker plot (upper right panel)
par(mar=c(5,5,4,2))
boxplot(y[i],col=col.fill,ylab=names(y[i]),
main='Box-and-Whisker Plot',...)
#empirical cumulative distribution function plot (lower left panel)
par(mar=c(5,5,4,2))
plot(sort(y[[i]]),type='o',col=col.point,yaxs='i',xaxs='i',
xlab='Cumulative Number of Plots',ylab=names(y[i]),
main='ECDF Plot',...)
#normal quantile-quantile plot (lower right panel)
par(mar=c(5,5,4,2))
qqnorm(y[,i],datax=TRUE,col=col.point,
main='Normal Q-Q Plot',...)
y.IQR<-IQR(y[,i],na.rm=TRUE)
if(y.IQR>0)	qqline(y[,i],datax=TRUE,col=col.line,...)
par(mar=c(1,1,1,1))
if(!i==ncol(y)) {readline("Press return for next plot ")}
} #end loop thru variables
par(oldpar)
} #end function
#########################################################
#2d: Conduct log transformation on plot-level data and then calculate site means.
#Conduct log-transformation on plot-level data
#>>>>Justification for log-transformation?
plotBiomassLogTrans <- data.trans(plotBiomass3[,3:length(plotBiomass3[1,])], method = 'log',
plot = F)
#Calculate site means from log-transformed plot-level data (USED IN ANALYSIS)
siteBiomassLogTrans <- summarize(X = plotBiomassLogTrans, by = plotBiomass3$siteName, colMeans,
stat.name = colnames(plotBiomass3)[3])
colnames(siteBiomassLogTrans)[1] <- "siteName"
#Remove site names from matrix columns and assign as row names.
#All biomass >> LOG-TRANSFORMED
siteBiomassLogTrans2 <- siteBiomassLogTrans[,2:(length(siteBiomassLogTrans[1,]))]
rownames(siteBiomassLogTrans2) <- siteBiomassLogTrans[,1]
###################################################################################################
###################################################################################################
#STEP #3: OPEN AND ADJUST COVER DATA
#########################################################
#3A: Open cover data
#Plot-level cover data. This data has been modified so that vine species are consistent
#across all sites and outlier plots located in uncharacteristics areas of sites (wetlands or meadows)
#have been removed.
plotCover <- read.table(
"C:/usfs_sef_data_output/sef_Ecology_CoverPlotMatrix_Ep1_OriginalOulierX_2014-10-15_10.32.12.csv",
header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE,
stringsAsFactors = F)
#########################################################
#3B The steps below create a more appropriate dataset by removing and combining some categories.
#For cover, remove non-plant categories, these are unecessary for our analysis.
#litter, bare.soil,
plotCover2 <- plotCover[,!colnames(plotCover) %in% c("litter", "bare.soil")]
#Combine like categories
#Dead forb and live forb > these are being combined because some sites were sampled in
#winter and some in summer so live or dead forb loadings are an indication of season
#rather then site differences.
forb <- plotCover2$live.forb + plotCover2$dead.forb
#Dead woody
dead.woody <- plotCover2$dead.shrub + plotCover2$dead.tree
#Rename live palmetto
palmetto <- plotCover2$live.palmetto
#Remove original categories that were combined into new categories in the steps above.
plotCover3 <- plotCover2[,!colnames(plotCover2) %in% c("live.forb", "dead.forb", "live.palmetto",
"dead.palmetto", "dead.shrub", "dead.tree")]
#Add in new category columns
plotCover4 <- data.frame(plotCover3, forb = forb, palmetto = palmetto)#did not add dead.woody
#########################################################
#3C: calculate site means for untransformed plot-level data.
#USED FOR DATA SCREENING ONLY - DATA NOT USED IN ANALYSIS.
#Calculate untransformed site means from plot-level data
siteCover <- summarize(X = plotCover4[,3:length(plotCover4[1,])], by = plotCover4$siteName,
colMeans, stat.name = colnames(plotCover4)[3])
colnames(siteCover)[1] <- "siteName"
#Remove site names from matrix columns and assign as row names.
#All cover >> UNTRANSFORMED
siteCover2 <- siteCover[,2:(length(siteCover[1,]))]
rownames(siteCover2) <- siteCover[,1]
#########################################################
#3d: Conduct transformation on plot-level data and then calculate site means?
#Is this necessary for cover data. This data is bounded (0-100) so a log-trans
#may not be appropriate if data is not normal.
###################################################################################################
###################################################################################################
#STEP #4: OPEN AND ADJUST ENVIRONMENTAL DATA
#########################################################
#4a: Open environmental matrix
siteEnv <- read.table(
"C:/usfs_sef_data_output/2014.03.13_EnvironmentalMatrix.csv",
header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE,
stringsAsFactors = F)
#########################################################
#4b: Re-assign column 1 (site names) to  a row name.
siteEnv2 <- siteEnv[,2:(length(siteEnv[1,]))]
rownames(siteEnv2) <- siteEnv[,1]
#########################################################
#4c: Environmental data, remove data you will not analyze
siteEnv3 <- siteEnv2[,-c(12,13)]
#Column 12 is soil drainage. This data is from USDA Soil Survey and not accurate
#Column 13 is region. Only two regions, at this point I don't believe this adds
#substance to the analysis because there are no physical properties for each region
#that can confound how fire characteristics drive understory plant composition
###################################################################################################
###################################################################################################
#STEP #5: STANDARDIZE ROW ORDER OF DATA SETS (I.E. ORDER SITE NAMES (ROW NAMES) OF BIOLOGICAL DATA
#ACCORDING TO ORDER IN ENVIRONMENTAL DATA SET) AND REMOVE COLUMNS WITH NO VALUES > 0.
#Reorder biological data (biomass) so sites are in same order as environmental data
#Step not necessary for cover data... sites are already in same order as environmental data.
ro <- data.frame(siteNo = 1:length(rownames(siteEnv3)), siteName = I(rownames(siteEnv3)))
ro2 <- ro[order(ro[,2]),]
#Untranformed biomass data
siteBiomass3 <- data.frame(so = ro2[,1], siteBiomass2)
siteBiomass4 <- siteBiomass3[order(siteBiomass3$so),]
siteBiomass5 <- siteBiomass4[,!colnames(siteBiomass4) %in% c("so")]
#Log-tranformed biomass data
siteBiomassLogTrans3 <- data.frame(so = ro2[,1], siteBiomassLogTrans2)
siteBiomassLogTrans4 <- siteBiomassLogTrans3[order(siteBiomassLogTrans3$so),]
siteBiomassLogTrans5 <- siteBiomassLogTrans4[,!colnames(siteBiomassLogTrans4) %in% c("so")]
#Remove species with no occurences, this is necessary before you can use foa.plots below
biomassOrig <- drop.var(siteBiomass5, min.fo = 1)
biomassLog <- drop.var(siteBiomassLogTrans5, min.fo = 1)
coverOrig <- drop.var(siteCover2, min.fo = 1)
#Drop rare species < 40% of sites (this reflects an asymptote in the
#Cumulative Distribution of Species Relative Occurrence, below which
#Species occur at less than 30% of sites).
bo <- drop.var(biomassOrig, min.po=40)
bl <- drop.var(biomassLog, min.po=40)
#Check to see how many species were dropped for untransformed biomass data
length(biomassOrig[1,])#
length(bo[1,])#
length(biomassLog[1,])#
length(bl[1,])
#40 to 19 variables (21 drops)
str(bo)#
str(bl)#
#Convert data.frame to a matrix (needed for uv.plots)
bo2 <- data.matrix(frame = bo, rownames.force = NA)
bl2 <- data.matrix(frame = bl, rownames.force = NA)
#uv.plots displays histogram, box and whisker, cumulative distribution and normal q-q plots
#in one pane for each variable.
uv.plots(bo2)
siteEnv4 <- data.stand(siteEnv3, method = 'total', margin = 'column', plot = F)
###################################################################################################
###################################################################################################
#STEP #7: PRELIMINARY ANALYSIS
#########################################################
#7a: Determine species with the highest and second highest biomass at each site
#and then display occurrence of dominant and co-dominant species with a histogram.
#Create a histogram of primary and secondary dominance across sites by species.
#Remove non-living categories (dead woody) from the biomass data
ab2mat <- biomassOrig#send newer file name to old file name
abhmat <- ab2mat[,-39]
#List of dominant species
prim <- mapply(function(x) {colnames(abhmat)[order(abhmat[x,])][39]}, 1:length(abhmat[,1]))
seco <- mapply(function(x) {colnames(abhmat)[order(abhmat[x,])][38]}, 1:length(abhmat[,1]))
dTable <- data.frame(Sites = I(rownames(ab2mat)), Primary = I(prim), Secondary = I(seco))
udom <- unique(c(unique(dTable[,2]),unique(dTable[,3])))
udomProper<- c("Ilex glabra", "Aristida stricta", "Lyonia ferruginea", "Serenoa repens",
"Quercus spp. (fire impeders)", "Quercus minima", "Vaccinium corymbosum",
"Rhizomatour grasses")
hprim <- mapply(function(x) {length(dTable[,2][dTable[,2] == udom[x]])}, 1:length(udom))
hseco <- mapply(function(x) {length(dTable[,3][dTable[,3] == udom[x]])}, 1:length(udom))
hdom <- data.frame(Species = I(udomProper), Primary = hprim, Secondary = hseco)
h2dom <- hdom[order(hdom[,2], decreasing = T),]
par(mai = c(2.5,1.2,1,1))
barplot(t(cbind(h2dom$Primary,h2dom$Secondary)), main = "",
xaxt = "n", ylab = "Number of sites", xlab = "", axes = F, beside = T,
col = c("white", "dark grey"))
axis(2)
text(matrix(c(seq(2,nrow(h2dom)*3,3), rep(-0.25,nrow(h2dom))), nrow = nrow(h2dom),
ncol = 2, byrow = F), srt = 60, adj = 1, xpd = T, labels = paste(h2dom$Species),
cex = 0.95)
legend(20,6, c("Dominant", "Co-dominant"), fill = c("white", "dark grey"), bty = "n")
#########################################################
#7b: Arrange species on bar chart with highest to lowest average biomass, also
#display average cover
#Make a table showing mean/sd biomass and cover
bm <- apply(abhmat,2,mean)
bs <- apply(abhmat,2,sd)
cm <- apply(coverOrig,2,mean)
cs <- apply(coverOrig,2,sd)
biomass <- data.frame(Mean = round(bm,2), SD = round(bs,2))
cover <- data.frame(cMean = round(cm,1), cSD = round(cs,1), bMean = rep(0, length(cs)),
bSD = rep(0,length(cs)))
length(biomass[,1])
cbind(rownames(biomass), match(rownames(biomass), rownames(cover)))
length(cover[,1])
cbind(rownames(cover), match(rownames(cover), rownames(biomass)))
for(i in 1:length(cover[,1]))
{
if(length(biomass[,1][rownames(biomass) %in% rownames(cover[i,])]) == 1)
{
cover[i,3] <- biomass[,1][rownames(biomass) %in% rownames(cover[i,])]
cover[i,4] <- biomass[,2][rownames(biomass) %in% rownames(cover[i,])]
} else
{
cover[i,3] <- NA
cover[i,4] <- NA
}
}
#Show table in decreasing order of species presence by biomass.
cover <- cover[order(cover[,3], decreasing = T),]
#Plot data
par(mai = c(2.5,1.2,1,1))
barplot(t(cbind(cover$bMean*10,cover$cMean)), main = "",
xaxt = "n", ylab = "% cover/Mg/ha * 10", xlab = "", axes = F, beside = T,
col = c("light green", "dark grey"))
axis(2)
text(matrix(c(seq(2,nrow(cover)*3,3), rep(-0.25,nrow(cover))), nrow = nrow(cover),
ncol = 2, byrow = F), srt = 60, adj = 1, xpd = T, labels = paste(rownames(cover)),
cex = 0.95)
legend(50,6, c("Biomass*10", "Cover"), fill = c("light green", "dark grey"), bty = "n")
#Create a function that will conduct a boundary layer regression with y variable as exponent,
#print summary of regression, and plot data
blr <- function(a,x,y,z)
{
cf <- 0.8
mv <- vector(mode = "numeric")
fv <- vector(mode = "numeric")
le <- vector(mode = "numeric")
fri <- 2:7
for(i in fri)
{
mv[i-1] <- max(y[x > i & x < i + 1])
fv[i-1] <- min(x[x > i & x < i + 1 & y == mv[i-1]])
le[i-1] <- length(y[x > i & x < i + 1])
mv[i-1] <- mv[i-1] + 0.0001
}
x2 <- fv
y2 <- mv
d <- data.frame(x2,y2)
logmodel <- lm(y2~a(x2),data=d)
### fake vector
xvec <- seq(0,8, length=101)
logpred <- predict(logmodel, newdata=data.frame(x2=xvec))
#Plot with boundary layer regression
plot(x, y, xlab = "Fire Rotation (years)", ylab = "biomass (Mg/ha)", main = z)
points(fv, mv, pch = 22)
lines(xvec,logpred)
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
print(summary(logmodel))
}
dev.off()
set.panel(2,4)
cf <- 0.5
#1-2
#Forb
#Plot with sites
genus <- ab2mat$forb
Genus <- "Forb"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
emat <- siteEnv3
#Environmental data
uv.outliers(emat, id ='Canopy:Duration', var = 'Soil_Pref', sd.limit = 2)
head(emat)
blr(log, emat$FineWD, genus, Genus)
genus
emat$FineWD
blr(log, emat$FineWD, genus, Genus)
length(genus)
length(emat$FineWD)
head(emat)
emat <- siteEnv3
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#3-11
#Grass
#Plot with sites
genus <- ab2mat$grass + ab2mat$bluestem
Genus <- "Graminoid (ex. Aristida)"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#1-2
#Forb
#Plot with sites
genus <- ab2mat$dead.forb + ab2mat$live.forb
Genus <- "Forb"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
All Palmetto
#Plot with sites
genus <- ab2mat$dead.palmetto + ab2mat$live.palmetto
Genus <- "Palmetto"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
genus
ab2mat$forb
ab2mat$dead.forb
ab2mat
25
#Gallberry
#Plot with sites
genus <- ab2mat$gallberry
Genus <- "Gallberry"
#Linear regression
logmodel <- lm(genus ~ emat$FireRotation)
y <- genus
plot(emat$FireRotation, genus,
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)", main = "Gallberry")
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
abline(logmodel)
#25
#Gallberry
#Plot with sites
genus <- ab2mat$gallberry
Genus <- "Gallberry"
#Linear regression
logmodel <- lm(genus ~ emat$FireRotation)
y <- genus
plot(emat$FireRotation, genus,
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)", main = "Gallberry")
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
abline(logmodel)
29
#Mound Oak
#Plot with sites
genus <- ab2mat$oak.shrub
Genus <- "Shrub Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#All Palmetto
#Plot with sites
genus <- ab2mat$dead.palmetto + ab2mat$live.palmetto
Genus <- "Palmetto"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover
Genus <- "Grouncover Oak"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
#Rough Fetterbush
#Plot with sites
genus <- ab2mat$rough.fetterbush
Genus <- "Rough Fetterbush"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
19
#Darrow's blueberry
#Plot with sites
genus <- ab2mat$Darrows.blueberry
Genus <- "Darrow's blueberry"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#19
#Darrow's blueberry
#Plot with sites
genus <- ab2mat$Darrows.blueberry
Genus <- "Darrow's blueberry"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
#Huckleberry
#Plot with sites
genus <- ab2mat$huckleberry
Genus <- "Huckleberry"
#Boundary layer regression
blr(exp, emat$FireRotation, genus, Genus)
#St. Andrew's Cross
#Plot with sites
genus <- ab2mat$St..Andrews.cross
Genus <- "St. Andrew's Cross"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#16
#Gopher Apple
#Plot with sites
genus <- ab2mat$gopher.apple
Genus <- "Gopher Apple"
#Boundary layer regression
blr(exp, emat$FireRotation, genus, Genus)
40
#American Holly
#Plot with sites
genus <- ab2mat$American.holly
Genus <- "American Holly"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#22
#Conradina
#Plot with sites
genus <- ab2mat$conradina
Genus <- "Conradina"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#22
#Conradina
#Plot with sites
genus <- ab2mat$conradina
Genus <- "Conradina"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#6
#Live Shrub
#Plot with sites
genus <- ab2mat$live.shrub
Genus <- "Live shrub"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#8
#Live Tree
#Plot with sites
genus <- ab2mat$live.tree
Genus <- "Live tree"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
ab2mat
#4-5
#All Palmetto
#Plot with sites
genus <- ab2mat$palmetto
Genus <- "Palmetto"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#Plot with sites
genus <- ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#START
#Purpose of this script is to serve as dummy data for GitHub testing
#Set working drive
setwd("C:/Users/jcronan/Documents/GitHub/Test_Area/")
#Import input table template.
overstory.table <- read.table("overstory_table.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Format the input table and add ID numbers for 10,000 trees.
overstory.table <- matrix(data = c(1:10000, rep(0, 10000), rep(0, 10000)), 10000, 3)
##re-add the column names that were stripped when you turned the table into a matrix.
colnames(overstory.table) <- c("ID_number", "Diameter_in", "Height_ft")
#Convert the data table into a data frame.
overstory.table <- as.data.frame(overstory.table)
#Use the negative exponential distribution to populate the table with DBH values.
overstory.table$Diameter_in <- round(rexp(10000, rate =0.2 ),1)
#Create a function that will predict height and incorporate variability.
pred_ht <- function(x,y)
{
round(rnorm(1, 4.5 + exp(7.26 + -5.89*(x^-0.28)), y),1)
}
#where x is diameter at breast height (DBH) in inches and y is standard deviation
#equation form is from Curtis 1967
#coefficients are from Hanus et al. 1999
#Populate data table with tree height data.
overstory.table$Height_ft <- sapply(overstory.table$Diameter_in, pred_ht, y = 1)
#Identify date and time.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
#Save file
write.csv(overstory.table, file = paste("output_file_on_",dt,"_",tm,".csv",sep = ""),
quote = TRUE, eol = "\n", na = "NA", row.names = FALSE)
#END
